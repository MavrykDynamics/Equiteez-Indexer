# generated by DipDup 8.0.0

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, ConfigDict


class BreakGlassConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    setMemberIsPaused: bool
    freezeMemberIsPaused: bool
    unfreezeMemberIsPaused: bool


class KycRegistrarLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    kycAdmins: List[str]
    membersVerified: str
    createdAt: str
    setMemberIsPaused: bool
    freezeMemberIsPaused: bool
    unfreezeMemberIsPaused: bool


class CountryTransferRuleLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    whitelistCountries: List[str]
    blacklistCountries: List[str]
    sendingFrozen: bool
    receivingFrozen: bool


class MemberLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    country: str
    region: str
    investorType: str
    expireAt: str
    frozen: bool
    kycRegistrar: str


class KycStorage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    superAdmin: str
    newSuperAdmin: str | None = None
    metadata: Dict[str, str]
    breakGlassConfig: BreakGlassConfig
    whitelistLedger: Dict[str, Dict[str, Any]]
    blacklistLedger: Dict[str, Dict[str, Any]]
    validInputLedger: Dict[str, List[str]]
    kycRegistrarLedger: Dict[str, KycRegistrarLedger]
    countryTransferRuleLedger: Dict[str, CountryTransferRuleLedger]
    memberLedger: Dict[str, MemberLedger]
    lambdaLedger: Dict[str, str]
