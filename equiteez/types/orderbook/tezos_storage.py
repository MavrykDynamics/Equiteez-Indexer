# generated by DipDup 8.0.0

from __future__ import annotations

from typing import Dict, List

from pydantic import BaseModel, ConfigDict


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    minExpiryTime: str
    minTimeBeforeClosingOrder: str
    minBuyOrderAmount: str
    minBuyOrderValue: str
    minSellOrderAmount: str
    minSellOrderValue: str
    buyOrderFee: str
    sellOrderFee: str


class FeeLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nat_0: str
    nat_1: str


class CurrencyLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    tokenType: str
    tokenContractAddress: str
    tokenId: str
    decimals: str


class RwaOrderLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    buyPriceMap: Dict[str, str]
    sellPriceMap: Dict[str, str]
    buyOrderMap: Dict[str, List[str]]
    sellOrderMap: Dict[str, List[str]]


class TotalOrderFulfilled(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nat_0: str
    nat_1: str


class Booleans(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bool_0: bool
    bool_1: bool
    bool_2: bool


class OrderTimestamps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    timestamp_0: str
    timestamp_1: str | None = None


class BuyOrderLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    initiator: str
    rwaTokenAmount: str
    pricePerRwaToken: str
    currency: str
    fulfilledAmount: str
    unfulfilledAmount: str
    totalOrderFulfilled: TotalOrderFulfilled
    booleans: Booleans
    isRefunded: bool
    refundedAmount: str
    orderExpiry: str | None = None
    orderTimestamps: OrderTimestamps


class SellOrderLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    initiator: str
    rwaTokenAmount: str
    pricePerRwaToken: str
    currency: str
    fulfilledAmount: str
    unfulfilledAmount: str
    totalOrderFulfilled: TotalOrderFulfilled
    booleans: Booleans
    isRefunded: bool
    refundedAmount: str
    orderExpiry: str | None = None
    orderTimestamps: OrderTimestamps


class HighestBuyPrice(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    orderId: str
    price: str


class LowestSellPrice(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    orderId: str
    price: str


class LastMatchedPrice(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    price: str
    lastMatchedTimestamp: str


class OrderbookStorage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    superAdmin: str
    newSuperAdmin: str | None = None
    rwaTokenAddress: str
    rwaTokenDecimals: str
    kycAddress: str
    metadata: Dict[str, str]
    config: Config
    pauseLedger: Dict[str, bool]
    feeLedger: Dict[str, FeeLedger]
    currencyLedger: Dict[str, CurrencyLedger]
    rwaOrderLedger: Dict[str, RwaOrderLedger]
    buyOrderLedger: Dict[str, BuyOrderLedger]
    sellOrderLedger: Dict[str, SellOrderLedger]
    highestBuyPrice: HighestBuyPrice
    lowestSellPrice: LowestSellPrice
    lastMatchedPrice: LastMatchedPrice
    buyOrderCounter: str
    sellOrderCounter: str
    lambdaLedger: Dict[str, str]
