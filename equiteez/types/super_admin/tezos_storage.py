# generated by DipDup 8.0.0

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, ConfigDict


class Key(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: str
    nat: str


class SignatureLedgerItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Key
    value: Dict[str, Any]


class SignatoryActionLedger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    initiator: str
    actionType: str
    executed: bool
    status: str
    signersCount: str
    dataMap: Dict[str, str]
    startDateTime: str
    startLevel: str
    executedDateTime: str | None = None
    executedLevel: str | None = None
    expirationDateTime: str


class Key1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address_0: str
    address_1: str


class ContractAdminLedgerItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Key1
    value: Dict[str, Any]


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    threshold: str
    actionExpiryInSeconds: str


class SuperAdminStorage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    signatoryLedger: Dict[str, Dict[str, Any]]
    signatorySize: str
    signatureLedger: List[SignatureLedgerItem]
    signatoryActionLedger: Dict[str, SignatoryActionLedger]
    actionCounter: str
    generalAdminLedger: Dict[str, Dict[str, Any]]
    contractAdminLedger: List[ContractAdminLedgerItem]
    metadata: Dict[str, str]
    config: Config
    lambdaLedger: Dict[str, str]
